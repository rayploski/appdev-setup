[
{
	"uri": "/system-preferences/",
	"title": "System Preferences",
	"tags": [],
	"description": "",
	"content": " System Preferences First thing you should do is update the system. To do that go: Apple menu (ï£¿) \u0026gt; About This Mac \u0026gt; Software Update.\nAlso upgrade your OS in case you want to work on the latest OS. macOS upgrades are usually free so you might as well keep your machine up to date.\nIf this is a new computer, there are a couple tweaks you could make to the System Preferences. These settings are all optional, consider them suggestions.\nUsers \u0026amp; Groups  Login Options -\u0026gt; Change fast switching user menu to Icon Set up Password, Apple ID, Picture, etc.  Trackpad  Point \u0026amp; Click  Enable Tap to click with one finger Change Secondary click to right corner Uncheck three finger drag  Scroll \u0026amp; Zoom  Uncheck all apart from Zoom in and out   Dock  Visual settings  Change position to left and make the size of Icons small  Other settings  Remove workspace auto-switching by running the following command:   $ defaults write com.apple.dock workspaces-auto-swoosh -bool NO $ killall Dock  Finder  Preferences  Change \u0026lsquo;New Finder windows show:\u0026rsquo; to something other than \u0026lsquo;All My Files\u0026rsquo; (which is a memory hog)  Toolbar  Update to add path, new folder and delete  Sidebar  Add home and code directory Remove shared and tags New finder window to open in the home directory   Menubar  Remove the display and Bluetooth icons Change battery to show percentage symbols  Spotlight  Uncheck fonts, images, files etc. Uncheck the keyboard shortcuts as we\u0026rsquo;ll be replacing them with Alfred  Accounts  Add an iCloud account and sync Calendar, Find my mac, Contacts etc.  User Defaults  Enable repeating keys by pressing and holding down keys: defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false (and restart any app that you need to repeat keys in) Change the default folder for screenshots  Open the terminal and create the folder where you would like to store your screenshots: mkdir /path/to/screenshots/ Then run the following command: defaults write com.apple.screencapture location /path/to/screenshots/ \u0026amp;\u0026amp; killall SystemUIServer   How to write to NTFS on OS X Yosemite and El Capitan Install Homebrew and Homebrew Cask  Instructions here  Update Homebrew formulae: $ brew update  Install osxfuse  If you are on OS X 10.11 (El Capitan), install the (3.x.x) from https://github.com/osxfuse/osxfuse/releases.\n$ brew cask install osxfuse\n  Install ntfs-3g $ brew install homebrew/fuse/ntfs-3g  If you are on OS X 10.11 (El Capitan), temporary disable System Integrity Protection  Reboot and hold CMD+R to get in recovery mode Open the terminal and type:\n$ csrutil disable\n Reboot normally\n  Create a symlink for mount_ntfs $ sudo mv /sbin/mount_ntfs /sbin/mount_ntfs.original $ sudo ln -s /usr/local/sbin/mount_ntfs /sbin/mount_ntfs  If you are on OSX 10.11 (El Capitan), re-enable System Integrity Protection  Reboot and hold CMD+R to get in recovery mode Open the terminal and type\n$ csrutil enable\n Reboot normally\n Done\n  "
},
{
	"uri": "/homebrew/usage/",
	"title": "Using Homebrew",
	"tags": [],
	"description": "",
	"content": " Using Homebrew To install a package (or Formula in Homebrew vocabulary) simply type:\n$ brew install \u0026lt;formula\u0026gt;  To update Homebrew\u0026rsquo;s directory of formulae, run:\n$ brew update  Note: I\u0026rsquo;ve seen that command fail sometimes because of a bug. If that ever happens, run the following (when you have Git installed):\n$ cd /usr/local/Homebrew/ $ git fetch origin $ git reset --hard origin/master  To see if any of your packages need to be updated:\n$ brew outdated  To update a package:\n$ brew upgrade \u0026lt;formula\u0026gt;  Homebrew keeps older versions of packages installed, in case you want to roll back. That rarely is necessary, so you can do some cleanup to get rid of those old versions:\n$ brew cleanup  To see what you have installed (with their version numbers):\n$ brew list --versions  "
},
{
	"uri": "/iterm/zsh/",
	"title": "zsh",
	"tags": [],
	"description": "",
	"content": " Zsh We\u0026rsquo;ll install zsh for all the features offered by oh-my-zsh. The installation and usage is really intuitive. We will also create the file env.sh, it is a config file we maintain so as to not pollute the ~/.zshrc too much. env.sh holds aliases, exports, path changes etc. and you can find it at the bottom of this page.\nZsh Install zsh and zsh-completions using Homebrew:\n$ brew install zsh zsh-completions  At this point you can customize your shell by using one of two frameworks Prezto or Oh My Zsh. You should follow one of the two sections below.\nInstall Prezto Install prezto on top of zsh to get additional functionality:\n$ git clone --recursive https://github.com/sorin-ionescu/prezto.git \u0026quot;${ZDOTDIR:-$HOME}/.zprezto\u0026quot;  Next create ~/.zshrc file by running:\nsetopt EXTENDED_GLOB for rcfile in \u0026#34;${ZDOTDIR:-$HOME}\u0026#34;/.zprezto/runcoms/^README.md(.N); do ln -s \u0026#34;$rcfile\u0026#34; \u0026#34;${ZDOTDIR:-$HOME}/.${rcfile:t}\u0026#34; done Add modules to Prezto by editing ~/.zpreztorc and adding:\nzstyle \u0026#39;:prezto:load\u0026#39; pmodule \\  \u0026#39;environment\u0026#39; \\  \u0026#39;terminal\u0026#39; \\  \u0026#39;editor\u0026#39; \\  \u0026#39;history\u0026#39; \\  \u0026#39;directory\u0026#39; \\  \u0026#39;spectrum\u0026#39; \\  \u0026#39;utility\u0026#39; \\  \u0026#39;completion\u0026#39; \\  \u0026#39;git\u0026#39; \\  \u0026#39;syntax-highlighting\u0026#39; \\  \u0026#39;history-substring-search\u0026#39; \\  \u0026#39;prompt\u0026#39; zstyle \u0026#39;:prezto:module:prompt\u0026#39; theme \u0026#39;paradox\u0026#39; Install Oh My Zsh Note: You don\u0026rsquo;t need this section if you installed Prezto.\nInstall Oh My Zsh on top of zsh to get additional functionality:\n$ curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh  If you\u0026rsquo;re still in the default shell, change default shell to zsh manually:\n$ chsh -s /usr/local/bin/zsh  Add plugins (they are all optional but recommended) to Oh My Zsh and use theme by editing ~/.zshrc and adding:\nZSH_THEME=pygmalion plugins=(git colored-man colorize github jira vagrant virtualenv pip python brew osx zsh-syntax-highlighting)  env.sh To include env.sh, open ~/.zshrc and add the following:\nsource ~/\u0026lt;path to file\u0026gt;/env.sh This file comes with some pre-defined settings, they are all optional. Please review them before you use them as your configuration.\n#!/bin/zsh # PATH export PATH=\u0026quot;/usr/local/share/python:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\u0026quot; export EDITOR='subl -w' # export PYTHONPATH=$PYTHONPATH # export MANPATH=\u0026quot;/usr/local/man:$MANPATH\u0026quot; # Virtual Environment export WORKON_HOME=$HOME/.virtualenvs export PROJECT_HOME=$HOME/projects source /usr/local/bin/virtualenvwrapper.sh # Owner export USER_NAME=\u0026quot;YOUR NAME\u0026quot; eval \u0026quot;$(rbenv init -)\u0026quot; # FileSearch function f() { find . -iname \u0026quot;*$1*\u0026quot; ${@:2} } function r() { grep \u0026quot;$1\u0026quot; ${@:2} -R . } #mkdir and cd function mkcd() { mkdir -p \u0026quot;$@\u0026quot; \u0026amp;\u0026amp; cd \u0026quot;$_\u0026quot;; } # Aliases alias cppcompile='c++ -std=c++11 -stdlib=libc++' # Use sublimetext for editing config files alias zshconfig=\u0026quot;subl ~/.zshrc\u0026quot; alias envconfig=\u0026quot;subl ~/projects/config/env.sh\u0026quot;  "
},
{
	"uri": "/homebrew/cask/",
	"title": "Cask",
	"tags": [],
	"description": "",
	"content": " Homebrew Cask Homebrew-Cask extends Homebrew and allows you to install large binary files via a command-line tool. Examples of these files is Google Chrome, Dropbox, VLC and Spectacle.\nInstallation As of December 2015, Cask comes installed with Homebrew, if you have not installed Homebrew see the Homebrew section.\nSearch To see if an app is available on Cask you can search on the official Cask website. You can also search using the following command:\n$ brew cask search \u0026lt;package\u0026gt;  Quick Look plugins These plugins adds support for the corresponding file type to Mac Quick Look (In Finder, mark a file and press Space to start Quick Look). The plugins includes features like syntax highlighting, markdown rendering, preview of JSON, patch files, csv, zip files and more.\n$ brew cask install \\  qlcolorcode \\  qlstephen \\  qlmarkdown \\  quicklook-json \\  qlprettypatch \\  quicklook-csv \\  betterzipql \\  webpquicklook \\  suspicious-package App Suggestions Here are some useful apps that are available on Cask.\n$ brew cask install \\  asepsis \\  appcleaner \\  atom \\  cheatsheet \\  docker \\  firefox \\  flash-player \\  iterm2 \\  gimp \\  github \\  google-chrome \\  google-drive \\  slack \\  spectacle \\  superduper \\  virtualbox \\  visual-studio-code \\  vlc"
},
{
	"uri": "/xcode/",
	"title": "XCode",
	"tags": [],
	"description": "",
	"content": " Xcode Xcode is an integrated development environment for macOS containing a suite of software development tools developed by Apple for developing software for macOS, iOS, watchOS and tvOS.\nDownload and install it from the App Store or from Apple\u0026rsquo;s website.\nFor installing Xcode command line tools run:\n$ xcode-select --install  It\u0026rsquo;ll prompt you to install the command line tools. Follow the instructions and you\u0026rsquo;ll have Xcode and Xcode command line tools both installed.\n"
},
{
	"uri": "/homebrew/",
	"title": "Homebrew",
	"tags": [],
	"description": "",
	"content": " Homebrew Homebrew calls itself The missing package manager for macOS and is an essential tool for any developer.\nInstallation An important dependency before Homebrew can run is the Command Line Tools for Xcode. These include compilers that will allow you to build things from source, if you are missing this it\u0026rsquo;s available through the App Store \u0026gt; Updates.\nTo install Homebrew paste the following command (without the $) in your terminal, hit Enter, and follow the steps on the screen:\n$ ruby -e \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026quot;  One thing we need to do is tell the system to use programs installed by Hombrew (in /usr/local/bin) rather than the OS default if it exists. We do this by adding /usr/local/bin to your $PATH environment variable (if you\u0026rsquo;re using oh my zsh you should use .zshrc instead of .bash_profile):\n$ echo 'export PATH=\u0026quot;/usr/local/bin:$PATH\u0026quot;' \u0026gt;\u0026gt; ~/.bash_profile  Alternatively, we can also insert /usr/local/bin to the first line of /private/etc/paths and reboot the Mac to change global paths loading order. Admin password may be required if you modify the file.\nTo be able to use brew you need to start a new terminal session. Do this by opening a new terminal tab with Cmd+T (you should also close the old one), then run the following command to make sure everything is working:\n$ brew doctor  "
},
{
	"uri": "/iterm/tree/",
	"title": "tree",
	"tags": [],
	"description": "",
	"content": " tree tree is a recursive directory listing command that produces a depth indented listing of files.\nInstallation To install the latest version, use homebrew:\nbrew install tree Usage Running tree will produce output like this:\n. âââ Apps âÂ âââ Octave.md âÂ âââ README.md âÂ âââ Settings.md âÂ âââ araxis-merge.jpg âÂ âââ beyond-compare.png âÂ âââ delta-walker.jpg âÂ âââ filemerge.png âÂ âââ kaleidoscope.png âââ CONTRIBUTING.md âââ Cpp âÂ âââ README.md âââ Docker âÂ âââ README.md âââ Git âÂ âââ README.md âÂ âââ gitignore.md âââ Go âââ README.md 5 directories, 14 files To limit the recursion you can pass an -L flag and specify the maximum depth tree will use when searching.\ntree -L 1 will output:\n. âââ Apps âââ CONTRIBUTING.md âââ Cpp âââ Docker âââ Git âââ Go 5 directories, 1 files"
},
{
	"uri": "/iterm/fzf/",
	"title": "fzf",
	"tags": [],
	"description": "",
	"content": " fzf fzf is a general-purpose command-line fuzzy finder.\nWhy use fzf  Speed Rich feature set Highly customizable  Installation Use homebrew to install fzf:\nbrew install fzf  If you want to use shell extensions:\n/usr/local/opt/fzf/install  which are:\n Key bindings (CTRL-T, CTRL-R, and ALT-C) (available for bash, zsh and fish) Fuzzy auto-completion (available for bash and zsh)  Usage Fuzzy completion  hit tab (â¹) after:\n File search vim **  or\nsubl **  Host name search ssh **   Note: for more fuzzy search things head over official repo\n Chrome history from CLI  Note: original blog post\n Open up shell config (most likely ~/.zshrc or command zshconfig) and add following function:\n# ch - browse chrome history ch() { local cols sep cols=$(( COLUMNS / 3 )) sep=\u0026#39;{::}\u0026#39; cp -f ~/Library/Application\\ Support/Google/Chrome/Profile\\ 1/History /tmp/h sqlite3 -separator $sep /tmp/h \\  \u0026#34;select substr(title, 1, $cols), url from urls order by last_visit_time desc\u0026#34; | awk -F $sep \u0026#39;{printf \u0026#34;%-\u0026#39;$cols\u0026#39;s \\x1b[36m%s\\x1b[m\\n\u0026#34;, $1, $2}\u0026#39; | fzf --ansi --multi | sed \u0026#39;s#.*\\(https*://\\)#\\1#\u0026#39; | xargs open }  Note: Ensure that path to History file is correct; read more information on StackOverflow\n "
},
{
	"uri": "/iterm/",
	"title": "iTerm2",
	"tags": [],
	"description": "",
	"content": " iTerm2 iTerm2 is an open source replacement for Apple\u0026rsquo;s Terminal. It\u0026rsquo;s highly customizable and comes with a lot of useful features.\nInstallation You can get the app from iTerm2 downloads page. Once downloaded, drag and drop the iTerm application file into your Applications folder.\n Note: Instead of downloading and installing iTerm2 manually, you can use Homebrew brew cask install iterm2\n Customization Colors and Font Settings Here are some suggested settings you can change or set, they are all optional.\n Set hot-key to open and close the terminal to command + option + i Go to profiles -\u0026gt; Default -\u0026gt; Terminal -\u0026gt; Check silence bell to disable the terminal session from making any sound Download one of iTerm2 color schemes and then set these to your default profile colors Change the cursor text and cursor color to yellow make it more visible Change the font to 14pt Source Code Pro Lite. Source Code Pro can be downloaded from project\u0026rsquo;s github repository. If you\u0026rsquo;re using BASH instead of ZSH you can add export CLICOLOR=1 line to your ~/.bash_profile file for nice coloring of listings  \nMacOS shortcuts ââ, ââ and â¥â, â¥â You might be familiar with shortcuts to skip a word (â¥) or go to start/end of the line (â). iTerm is not set up to work with these shortcuts by default but here\u0026rsquo;s how you set them up:\nopen up iTerm2 preferences (â,) -\u0026gt; Profiles -\u0026gt; Keys -\u0026gt; Click on + icon (add new Keyboard shortcut).\n   shortcut action send     ââ SEND ESC SEQ OH   ââ SEND ESC SEQ OF   â¥â SEND ESC SEQ b   â¥â SEND ESC SEQ f    "
},
{
	"uri": "/git/",
	"title": "Git",
	"tags": [],
	"description": "",
	"content": " Git and GitHub What\u0026rsquo;s a developer without Git? To install, simply run:\n$ brew install git  When done, to test that it installed fine you can run:\n$ git --version  And $ which git should output /usr/local/bin/git.\nNext, we\u0026rsquo;ll define your Git user (should be the same name and email you use for GitHub):\n$ git config --global user.name \u0026#34;Your Name Here\u0026#34; $ git config --global user.email \u0026#34;your_email@youremail.com\u0026#34; They will get added to your .gitconfig file.\nTo push code to your GitHub repositories, we\u0026rsquo;re going to use the recommended HTTPS method (versus SSH). So you don\u0026rsquo;t have to type your username and password everytime, let\u0026rsquo;s enable Git password caching as described here:\n$ git config --global credential.helper osxkeychain  SSH Config for GitHub This might be difficult to configure in case you have two factor authentication enabled. Please use the SSH config in that case.\nSetting up SSH is really simple as well. Most of the instructions below are referenced from here.\nFirst, we need to check for existing SSH keys on your computer. Open up your Terminal and type:\n$ cd ~/.ssh $ ls -al # Lists the files in your .ssh directory Check the directory listing to see if you have files named either id_rsa.pub or id_dsa.pub. If you don\u0026rsquo;t have either of those files go to step 2. Otherwise, you can skip to step 3.\nSecond, To generate a new SSH key, copy and paste the text below, making sure to substitute in your email. The default settings are preferred, so when you\u0026rsquo;re asked to \u0026ldquo;enter a file in which to save the key,\u0026rdquo;\u0026rdquo; just press enter to continue.\n$ ssh-keygen -t rsa -C \u0026#34;your_email@example.com\u0026#34; # Creates a new ssh key, using the provided email as a label # Generating public/private rsa key pair. # Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] Please use a strong passphrase for your keys.\nThird, Add your keys to GitHub by going into account settings.\nLastly, Add your keys to the ssh-agent:\n$ eval \u0026#34;$(ssh-agent -s)\u0026#34; $ ssh-add -K ~/.ssh/id_rsa Optionally, you can configure your ssh keys in ~/.ssh/config:\nHost * AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/id_rsa  The configuration above will add your ssh key to the ssh-agent and store your passphrase in the keychain, so that you are not asked for it each time you use the key.\nDS_Store On a Mac, it is important to remember to add .DS_Store (a hidden macOS system file that\u0026rsquo;s put in folders) to your .gitignore files.\nIf you want to never include .DS_Store files in your Git repositories, you can configure your Git to globally exclude those files:\n# specify a global exclusion list $ git config --global core.excludesfile ~/.gitignore # adding .DS_Store to that list $ echo .DS_Store \u0026gt;\u0026gt; ~/.gitignore Setting up Sublime Text as the Git Mergetool $ git config --global mergetool.sublime.cmd \u0026#34;subl -w \\$MERGED\u0026#34; $ git config --global mergetool.sublime.trustExitCode false $ git config --global merge.tool sublime $ git mergetool -y"
},
{
	"uri": "/vim/",
	"title": "Vim",
	"tags": [],
	"description": "",
	"content": " Vim Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as \u0026ldquo;vi\u0026rdquo; with most UNIX systems and with Apple macOS.\nInstallation To install the latest version, use homebrew:\nbrew install vim The Ultimate vimrc The Ultimate vimrc it\u0026rsquo;s a collection of vimrc configurations to make easy the usage of vim.\nTo download the The Ultimate vimrc, you need to install the git client. If you need install it, use home brew:\nbrew install git Now, download the vimrc files:\ngit clone https://github.com/amix/vimrc.git ~/.vim_runtime To install the complete version, run:\nsh ~/.vim_runtime/install_awesome_vimrc.sh To install the basic version, run:\nsh ~/.vim_runtime/install_basic_vimrc.sh Update To update the vimrc scripts, run:\ncd ~/.vim_runtime \u0026amp;\u0026amp; git pull --rebase \u0026amp;\u0026amp; cd - Maximum Awesome Maximum Awesome it\u0026rsquo;s a collection of vim configuration and plugins, like a configuration manager for the vim environment.\nInstallation To install it, just make a clone of the repository with the git client:\ngit clone https://github.com/square/maximum-awesome.git Then install it:\ncd maximum-awesome rake  NOTE: the rake command will install all dependencies needed.\n "
},
{
	"uri": "/emacs/",
	"title": "Emacs",
	"tags": [],
	"description": "",
	"content": " Emacs Emacs is a family of text editors that are characterized by their extensibility. The manual for the most widely used variant, GNU Emacs, describes it as the extensible, customizable, self-documenting, real-time display editor.\nDevelopment of the first Emacs began in the mid-1970s, and work on its direct descendant, GNU Emacs, continues actively as of 2017.\nInstallation There are many Emacs clients on macOS. The recommended version on macOS is Emacs Mac Port, but others are good as well.\nEmacs Mac port (Recommended) Many useful features are built with Emacs Mac Port, e.g. environment variables, full screen, visual enhancements and so on.\nLink the Homebrew tap first.\nbrew tap railwaycat/emacsmacport  Method 1: Install with brew cask.  brew cask install emacs-mac There are three available versions, emacs-mac, emacs-mac-official-icon, emacs-mac-spacemacs-icon.\n Method 2: Build from source with Homebrew.  brew install emacs-mac [options] brew linkapps emacs-mac  Click here to see available options:  1. \u0026ndash;with-dbus, Build with d-bus support\n2. \u0026ndash;with-modules, Build with dynamic modules support\n3. \u0026ndash;with-xml2, Build with libxml2 support\n4. \u0026ndash;with-ctags, Don\u0026rsquo;t remove the ctags executable that emacs provides\n5. \u0026ndash;with-no-title-bars, Build with a patch for no title bars on frames (\u0026ndash;HEAD is not supported)\n6. \u0026ndash;with-natural-title-bar, Build with a patch for title bar color inferred by your theme (\u0026ndash;HEAD is not supported). More info is provided here\n7. \u0026ndash;with-official-icon, Using official Emacs icon\n8. \u0026ndash;with-modern-icon, Using a modern style Emacs icon by @tpanum\n9. \u0026ndash;with-spacemacs-icon, Using the spacemacs Emacs icon by Nasser Alshammari\n10. \u0026ndash;with-icon-for-documents, Using official icon for documents which default open with Emacs\n\nEmacs plus brew tap d12frosted/emacs-plus brew install emacs-plus [options] brew linkapps emacs-plus  Click here to see available options:  1. \u0026ndash;with-24bit-color: Experimental: build with 24 bit color support\n2. \u0026ndash;with-ctags: Don\u0026rsquo;t remove the ctags executable that Emacs provides\n3. \u0026ndash;with-dbus: Build with dbus support\n4. \u0026ndash;with-mailutils: Build with mailutils support\n5. \u0026ndash;with-natural-title-bar: Experimental: use a title bar colour inferred by your theme\n6. \u0026ndash;with-no-title-bars: Experimental: build with a patch for no title bars on frames (\u0026ndash;HEAD has this built-in via undecorated flag)\n7. \u0026ndash;with-x11: Experimental: build with x11 support\n8. \u0026ndash;without-cocoa: Build a non-Cocoa version of Emacs\n9. \u0026ndash;without-gnutls: Build without gnutls support\n10. \u0026ndash;without-imagemagick@6: Build without imagemagick@6 support\n11. \u0026ndash;without-librsvg: Build without librsvg support\n12. \u0026ndash;without-libxml2: Build without libxml2 support\n13. \u0026ndash;without-modules: Build without dynamic modules support\n14. \u0026ndash;without-multicolor-fonts: Build without a patch that enables multicolor font support\n15. \u0026ndash;without-spacemacs-icon: Build without Spacemacs icon by Nasser Alshammari\n16. \u0026ndash;HEAD: Install HEAD version\n\n Note: You might want to install exec-path-from-shell if you are using Emacs plus. It takes care of your environment variables.\nNote: to have the title bar match your theme background color, consider using instead: brew install emacs-plus --HEAD --with-natural-title-bars\n Spacemacs Spacemacs is a new way to experience Emacs \u0026ndash; a sophisticated and polished set-up focused on ergonomics, mnemonics and consistency.\nSpacemacs can be used naturally by both Emacs and Vim users \u0026ndash; you can even mix the two editing styles. Switching easily between input styles makes Spacemacs a great tool for pair-programming.\nInstallation  If you have an existing Emacs configuration, back it up first:  cd ~ mv .emacs.d .emacs.d.bak mv .emacs .emacs.bak Don\u0026rsquo;t forget to backup and remove ~/.emacs file otherwise Spacemacs WILL NOT load since that file prevents Emacs from loading the proper initialization file.\n Clone the repository:  git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d master is the stable branch and it is immutable, DO NOT make any modification to it or you will break the update mechanism. If you want to fork Spacemacs safely use the develop branch where you handle the update manually.\n (Optional) Install the Source Code Pro font.  If you are running in terminal you\u0026rsquo;ll also need to change font settings of your terminal.\n Launch Emacs. Spacemacs will automatically install the packages it requires. If you get an error regarding package downloads then you may try to disable the HTTPS protocol by starting Emacs with  emacs --insecure Or you can set the dotspacemacs-elpa-https to nil in your dotfile to remove the need to start Emacs with --insecure argument. You may wish to clear out your .emacs.d/elpa directory before doing this, so that any corrupted packages you may have downloaded will be re-installed.\n Restart Emacs to complete the installation.  Purcell\u0026rsquo;s Emacs configuration This is Purcell\u0026rsquo;s emacs configuration tree, continually used and tweaked since 2000, and it may be a good starting point for other Emacs users, especially those who are web developers. These days it\u0026rsquo;s somewhat geared towards macOS, but it is known to also work on Linux and Windows.\nInstallation To install, clone this repo to ~/.emacs.d, i.e. ensure that the init.el contained in this repo ends up at ~/.emacs.d/init.el:\ngit clone https://github.com/purcell/emacs.d.git ~/.emacs.d Upon starting up Emacs for the first time, further third-party packages will be automatically downloaded and installed. If you encounter any errors at that stage, try restarting Emacs, and possibly running M-x package-refresh-contents before doing so.\nDoom Emacs Doom is a configuration for GNU Emacs written by a stubborn, shell-dwelling, and melodramatic ex-vimmer. It wasn\u0026rsquo;t originally intended for public use, but can be considered a hacker\u0026rsquo;s starter kit.\nInstallation git clone https://github.com/hlissner/doom-emacs ~/.emacs.d cd ~/.emacs.d cp init.example.el init.el # maybe edit init.el make install Don\u0026rsquo;t forget to run make every time you modify init.el!\nVisit the wiki for a more detailed guide on installing, customizing and grokking Doom.\n"
},
{
	"uri": "/java/",
	"title": "Java",
	"tags": [],
	"description": "",
	"content": " Java Our customers and prospects run on various versions of Java (some even 4-5 years old)! Here\u0026rsquo;s the latest recommended way to install various JDKs from Oracle, OpenJDK and even Azul. We will install and manage multiple versions of Java on MacOS.\nInstallation Manage multiple JVMs with jenv First you should check if Java is already installed\n$ java -version  If you see an output like below then Java is already installed on your machine so skip to Add Java to PATH.\njava version \u0026quot;1.8.0_45\u0026quot; Java(TM) SE Runtime Environment (build 1.8.0_45-b14) Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02, mixed mode)  If you don\u0026rsquo;t see the output like above then you need to install Java on your system.\nUsing the Oracle installer Please download the macOS version from the Oracle website.\nUsing Homebrew brew update brew tap caskroom/versions  Then, install latest version of Java 10 via:\nbrew cask install java  or install Java 8 using:\nbrew cask install java8  Check if Java is correctly installed by running the java -version command again.\nAdd Java to PATH Add JAVA_HOME to your environment variables by adding the line below to your env.sh (see iTerm2 section if you don\u0026rsquo;t have a env.sh file).\nexport JAVA_HOME=\u0026quot;`/usr/libexec/java_home -v 1.8`\u0026quot;  If you are using Java 10, use the following:\nexport JAVA_HOME=\u0026quot;`/usr/libexec/java_home -v 10`\u0026quot;  You should have Java working now. Two popular IDE alternatives for writing Java are Eclipse or IntelliJ.\nInstall jenv While it isn\u0026rsquo;t a wholesale fix for the various java environments you may need, it does the trick for most use cases. jenv will allow you to quickly switch from version to version of a JVM. There are some tricks to getting it to work with various vendors (OpenJDK, Oracle, Azul)\nbrew install jenv  Install OpenJDK Currently there is no \u0026ldquo;official\u0026rdquo; OpenJDK install via HomeBrew. The best contibution out at the moment is AdoptOpenJDK.\nbrew tap AdoptOpenJDK/openjdk brew install \u0026lt;version\u0026gt;  Install javadoc brew cask install java-jdk-javadoc ln -s /usr/local/Caskroom/java-jdk-javadoc/10.0.1,10:fb4372174a714e6b8c52526dc134031e/docs/index.html ~/Desktop/javadoc.html # AdoptOpenJDK - HomeBrew TAP  To use: brew tap AdoptOpenJDK/openjdk brew install \u0026lt;version\u0026gt; Versions  adoptopenjdk-openjdk8 adoptopenjdk-openjdk9 adoptopenjdk-openjdk10  "
},
{
	"uri": "/node.js/",
	"title": "Node.js",
	"tags": [],
	"description": "",
	"content": " Node.js Node.js is a JavaScript runtime built on Chrome\u0026rsquo;s V8 JavaScript engine.\nInstallation Using Homebrew $ brew install node  Using Node Version Manager (nvm) Download and install nvm by running:\n$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh | bash  Then download Node and select your version by running:\n$ source ~/.bashrc # source your bashrc/zshrc to add nvm to PATH $ command -v nvm # check the nvm use message $ nvm install node # install most recent Node stable version $ nvm ls # list installed Node version $ nvm use node # use stable as current version $ nvm ls-remote # list all the Node versions you can install $ nvm alias default node # set the installed stable version as the default Node  See the documentation for information.\nnpm usage To install a package:\n$ npm install \u0026lt;package\u0026gt; # Install locally $ npm install -g \u0026lt;package\u0026gt; # Install globally  To install a package and save it in your project\u0026rsquo;s package.json file:\n$ npm install \u0026lt;package\u0026gt; --save  To see what\u0026rsquo;s installed:\n$ npm list [-g]  To find outdated packages:\n$ npm outdated [-g]  To upgrade all or a particular package:\n$ npm update [-g] [\u0026lt;package\u0026gt;]  To uninstall a package:\n$ npm uninstall [-g] \u0026lt;package\u0026gt;  "
},
{
	"uri": "/go/",
	"title": "Go",
	"tags": [],
	"description": "",
	"content": " Go Go (also known as Golang) is an open source programming language maintained by Google.\nInstallation $ brew install golang  When installed, try to run go version to see the installed version of Go.\nSetup your workspace Add environment variables Go has a unique approach of managing code where you have a single workspace for all your Go projects. For more information see the documentation.\nFirst, you\u0026rsquo;ll need to tell Go the location of your workspace. We\u0026rsquo;ll do this by adding some environment variables in your shell config file (usually .bash_profile, .bashrc or .zshrc).\nexport GOPATH=$HOME/go export GOROOT=/usr/local/opt/go/libexec export PATH=$PATH:$GOPATH/bin export PATH=$PATH:$GOROOT/bin Create your workspace Create the workspace directories tree:\n$ mkdir -p $GOPATH $GOPATH/src $GOPATH/pkg $GOPATH/bin  $GOPATH/src This is where your Go projects are located $GOPATH/pkg A folder that contains every package objects $GOPATH/bin The compiled binaries home\nWrite your first program Create a file in your $GOPATH/src, for example hello.go, and input the following code\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Printf(\u0026#34;hello, world\\n\u0026#34;) } Run the program by running:\n$ go run hello.go  If you wish to compile it and move it to $GOPATH/bin, then run:\n$ go install hello.go  Since we have $GOPATH/bin added to our $PATH, you can run your program from anywhere:\n$ hello  Import a Go package Besides creating your own packages you can import and use other packages in your Go code. To do so you\u0026rsquo;ll use the go get command:\n$ go get -u github.com/gorilla/mux  The command above will import the package mux into this directory $GOPATH/src/github.com/gorilla/mux.\nYou can then use this package in your Go programs like this:\npackage main import ( \u0026#34;net/http\u0026#34; \u0026#34;log\u0026#34; \u0026#34;github.com/gorilla/mux\u0026#34; // Your imported package ) func YourHandler(w http.ResponseWriter, r *http.Request) { w.Write([]byte(\u0026#34;Gorilla!\\n\u0026#34;)) } func main() { r := mux.NewRouter() // Routes consist of a path and a handler function.  r.HandleFunc(\u0026#34;/\u0026#34;, YourHandler) // Bind to a port and pass our router in  log.Fatal(http.ListenAndServe(\u0026#34;:8000\u0026#34;, r)) } Format your code Go has a built-in tool that automatically formats Go source code.\nTo format a single file run:\n$ gofmt -w yourcode.go  You can also format an entire package (Note that the command is different from formatting a single file):\n$ go fmt path/to/your/package  Generate documentation With the godoc command you can generate documentation from your code and read documentation from other packages.\n$ godoc fmt # documentation for package fmt $ godoc fmt Printf # documentation for fmt.Printf $ godoc -src fmt # fmt package interface in Go source form  You need to respect some spec in order to document using godoc. More information in the Godoc documentation.\nLearn more This interactive tutorial will let you learn more about Go.\n"
},
{
	"uri": "/iterm/ack/",
	"title": "ack",
	"tags": [],
	"description": "",
	"content": " ack ack is a search tool designed for code. It\u0026rsquo;s built to be a replacement for grep with higher speed and more options.\nInstallation To install the latest version, use homebrew.\nbrew install ack Why use ack over grep  Faster Skips unimportant files by default It searches recursively by default Customizable  Usage ack [OPTION]... PATTERN [FILES OR DIRECTORIES] Let\u0026rsquo;s say you want to find all JavaScript files that are using the module pancakes in your project, with ack it\u0026rsquo;s as easy as\nack --js pancakes Or you may want to find all files that does not contain the word brew\nack -L brew Customization You can customize ack to behave the way you want it to, this configuration is stored in /.ackrc.\nFor example, you can add a custom type to use as a flag when searching. The following configuration will allow you to only search in .md, .mkd and .markdown files using the --markdown flag.\n--type-set=markdown=.md,.mkd,.markdown You can also tell ack to always sort and use colors in the result.\n--sort-files --color To see what configuration ack uses you can use the dump flag.\nack --dump Alternatives to ack There\u0026rsquo;s The Silver Surfer which describes itself as a \u0026gt; A code searching tool similar to ack, with a focus on speed.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/git/gitignore/",
	"title": "Git Ignore",
	"tags": [],
	"description": "",
	"content": " Git Ignore (global) Create the file ~/.gitignore as shown below to not track files that are almost always ignored in all Git repositories.\n# Folder view configuration files .DS_Store Desktop.ini # Thumbnail cache files ._* Thumbs.db # Files that might appear on external disks .Spotlight-V100 .Trashes # Compiled Python files *.pyc # Compiled C++ files *.out # Application specific files venv node_modules .sass-cache  Or simply download macOS specific .gitignore maintained by GitHub itself and put contents of it to ~/.gitignore.\n Note: You can also download it using curl\ncurl https://raw.githubusercontent.com/github/gitignore/master/Global/macOS.gitignore -o ~/.gitignore   "
},
{
	"uri": "/",
	"title": "Red Hat AppDev Setup",
	"tags": [],
	"description": "Some hints and tips for building out an AppDev environment for Red Hat technologies",
	"content": " The AppDev Guide The Red Hat AppDev Setup Guide   is a site for the busy developer looking to use Red Hat AppDev technologies.\nThis guide covers the basics of setting up a development environment on a new Mac. Whether you are an experienced programmer or not, this guide is intended for everyone to use as a reference for setting up your environment or installing Red Hat related tools and technologies.\nSome of the environments we will set up are Java, Node (JavaScript), Python, CPlusPlus and Ruby. Even if you don\u0026rsquo;t program in all of them, they are useful to have as many command-line tools rely on them. We\u0026rsquo;ll also show you some useful daily use applications. As you read and follow these steps, feel free to post any feedback or comments you may have.\nAll contributions to the guide are welcome. Please help add support for other libraries and languages. To make a contribution please use our contribution template.\nLooking for contributors to maintain and extend the documentation.\nNote: This guide has been generated using GitBook and is open source, feel free to contribute or create new issues on GitHub.\nTODO: Add references here or in a credits section.\n"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/xcode/xquartz/",
	"title": "XQuartz",
	"tags": [],
	"description": "",
	"content": " XQuartz XQuartz is Apple Inc.\u0026rsquo;s version of the X server, a component of the X Window System for macOS. It might be useful if you are developing software for macOS, it\u0026rsquo;s available for download here.\n"
}]